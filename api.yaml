swagger: "2.0"
info:
  title: Node Js API Project for physiotherapy
  description: API documentation for physiotherapy
  version: "1.0"

tags:
  - name: User
    description: Endpoints related to user management
  - name: Patient
    description: Endpoints related to patient operations
  - name: Payment
    description: Endpoints related to payment operations
  - name: Admin
    description: Endpoints related to admin operations

# host: manipal-server.onrender.com
host: localhost:8000
schemes:
  # - https
  - http

consumes:
  - application/json

produces:
  - application/json

paths:
  /api/users:
    get:
      tags: # Assigning the 'user' tag to this endpoint
        - User
      summary: Get all users
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/User"

  /api/users/{id}:
    get:
      tags: # Assigning the 'user' tag to this endpoint
        - User
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              error:
                type: string
    patch:
      tags: # Assigning the 'user' tag to this endpoint
        - User
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          type: string
        - in: body
          name: user
          description: User data to update
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Update successful
          schema:
            $ref: "#/definitions/User"
    delete:
      tags: # Assigning the 'user' tag to this endpoint
        - User
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          type: string
      responses:
        200:
          description: Deletion successful
          schema:
            type: object
            properties:
              status:
                type: string
  /api/users/signup:
    post:
      tags: # Assigning the 'user' tag to this endpoint
        - User
      summary: Create a new user
      parameters:
        - in: body
          name: user
          description: User registration data
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: User created successfully
          schema:
            type: object
            properties:
              msg:
                type: string
              id:
                type: string

  /api/patient/all_patients/:
    get:
      tags: # Assigning the 'user' tag to this endpoint
        - Patient
      summary: Get all registered patients
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: "#/definitions/Patient"

  /api/patient/patient_registration:
    post:
      tags: # Assigning the 'patient' tag to this endpoint
        - Patient
      summary: Register a new patient
      description: Creates a new patient record
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: patient
          description: Patient registration data
          schema:
            $ref: "#/definitions/Patient"
      responses:
        200:
          description: Successfully registered a new patient
        400:
          description: Bad request, check request payload

  /api/patient/{id}:
    get:
      tags: # Assigning the 'patient' tag to this endpoint
        - Patient
      summary: Get a patient by ID
      parameters:
        - name: id
          in: path
          description: ID of the patient to retrieve
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/Patient"
        404:
          description: Patient not found
          schema:
            type: object
            properties:
              error:
                type: string
    patch:
      tags: # Assigning the 'patient' tag to this endpoint
        - Patient
      summary: Update a patient by ID
      parameters:
        - name: id
          in: path
          description: ID of the patient to update
          required: true
          type: string
        - in: body
          name: patient
          description: Patient data to update
          required: true
          schema:
            $ref: "#/definitions/Patient"

      responses:
        200:
          description: Update successful
          examples:
            status: Update Successful
            patient: object
          schema:
            type: object
            properties:
              status:
                type: string
              patient:
                type: object
    delete:
      tags: # Assigning the 'patient' tag to this endpoint
        - Patient
      summary: Delete a patient by ID
      parameters:
        - name: id
          in: path
          description: ID of the patient to delete
          required: true
          type: string
      responses:
        200:
          description: Deletion successful
          schema:
            type: object
            properties:
              status:
                type: string

  /api/payment/all_payments/:
    get:
      summary: "Get all payments"
      tags:
        - "Payment"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientPayment"

  /api/payment/add_payment/:
    post:
      summary: "Create a new payment"
      tags:
        - "Payment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Payment details"
          required: true
          schema:
            $ref: "#/definitions/PatientPayment"

      responses:
        201:
          description: "Payment created successfully"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
              patient_id:
                type: "string"
                default: "Id of created payment"
            example:
              msg: success
              patient_id: "string"

        400:
          description: "Invalid request body"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              - msg: all fields are required and amount should be greater than 0
              - msg: "Validation error: id not found "

        500:
          description: "server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal server error"

definitions:
  User:
    required:
      - firstName
      - email
      - userType
      - password
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      userType:
        type: string
      password:
        type: string
        format: password

  Patient:
    required:
      - patientName
      - gender
      - age
    properties:
      patientName:
        type: string
      gender:
        type: string
      age:
        type: number
        example: 46
      dob:
        type: string
        format: date
      contact:
        type: number
        default: 123456789
      email:
        type: string
        default: "NA"
      IdProof:
        type: object
        properties:
          IdType:
            type: string
            default: "NA"
          Id:
            type: string
            default: "NA"
      bloodGroup:
        type: string
        default: "NA"
      weight:
        type: number
      height:
        type: number
      relative:
        type: string
        default: "NA"
      complaint:
        type: string
      referredTo:
        type: string
        default: "NA"
      address:
        type: object
        properties:
          country:
            type: string
            default: "India"
          state:
            type: string
          district:
            type: string
          pin_code:
            type: string
            default: "NA"
          village:
            type: string
            default: "NA"

  PatientPayment:
    type: object
    properties:
      patientId:
        type: string
        description: The ID of the patient associated with the payment
      paymentType:
        type: string
        enum: ["daily", "15_days", "30_days"]
        description: The type of payment
      amount:
        type: number
        example: 100
        description: The amount of the payment
      paymentDate:
        type: string
        format: date-time
        description: The date of the payment
    required:
      - patientId
      - paymentType
      - amount
